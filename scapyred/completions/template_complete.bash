############################
# Scapy RED autocompletion #
############################

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) Gabriel Potter

# This file is autogenerated, and provides bash completion for the command line
# scripts that are included in Scapy RED.

### Common

declare -a completions
declare -a noarguments

_scapyred_complete() {
  COMPREPLY=()
  local word="${COMP_WORDS[COMP_CWORD]}"
  local prevword="${COMP_WORDS[COMP_CWORD-1]}"

  # We are outputting suggestions for the next word.
  # Our logic is to output compulsory words first, then if all done
  # the optional ones.
  local words=("${COMP_WORDS[@]}")
  unset words[0]
  unset words[$COMP_CWORD]

  # Before: we first check whether the previous word is a keyword that takes an
  # an argument, in which case we don't propose anything.
  if [ $COMP_CWORD -ge 2 ]; then
    # Check if the previous word is an argument
    for i in ${!completions[@]}; do
      if [[ "$prevword" == "${completions[$i]}" ]]; then
        # Yes. In which case:
        # - either it's in 'noarguments' and we keep going
        # - or it's not and we stop
        local keepgoing=0
        for j in ${!noarguments[@]}; do
          if [[ "$prevword" == "${noarguments[$j]}" ]]; then
            keepgoing=1
          fi
        done
        if [ $keepgoing -eq 0 ]; then
          return
        fi
      fi
    done
  fi

  # Remove existing words from available completions
  for i in ${!words[@]}; do
    for j in ${!completions[@]}; do
      if [[ "${words[$i]}" == "${completions[$j]}" ]]; then
        unset completions[$j]
      fi
    done
  done

  COMPREPLY=( $(compgen -W "$(printf "%b " "${completions[*]}")" -- "$word") )
}

### Completions
